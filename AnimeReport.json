{"name":"AnimeReport","code":"using ClosedXML.Excel;\nusing GlobalObjects;\nusing System;\nusing System.Linq;\nusing System.Threading;\nusing System.Text.RegularExpressions;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing AniListNet;\nusing AniListNet.Objects;\nusing AniListNet.Parameters;\nusing TagCloudGenerator;\nusing System.Drawing.Text;\nusing Color = System.Drawing.Color;\nusing FontFamily = System.Drawing.FontFamily;\nusing System.Drawing;\n\nnamespace AnalyzeCode\n{\n    public class Analyze\n    {\n        public class Anime \n        {\n            public AnimeType animeType;\n            public Season season;\n            public string year;\n            public string name;\n            public string origName;\n            public string productionCompany;\n            \n            public Status status;\n            public bool planToWatch;\n            public int score;\n            public string comment;\n            public List<string> tagListFromLocal;\n        }\n        \n        public enum Status { NeverWatched, Watching, Watched, GaveUp };\n        \n        public enum Season { Winter, Spring, Summer, Autumn, None };\n        public static Dictionary<Season, List<string>> SeasonDic = new Dictionary<Season, List<string>>() \n        {\n            { Season.Winter, new List<string>(){ \"1月－3月\"} },\n            { Season.Spring, new List<string>(){ \"4月－6月\"} },\n            { Season.Summer, new List<string>(){ \"7月－9月\"} },\n            { Season.Autumn, new List<string>(){ \"10月－12月\"} }\n        };\n    \n        public enum TitleType { Date, Name, OrigName, ProductionCompany };\n        public static Dictionary<TitleType, List<string>> TitleDic = new Dictionary<TitleType, List<string>>() \n        {\n            { TitleType.Date, new List<string>(){ \"日\"} },\n            { TitleType.Name, new List<string>(){ \"作品名\", \"中文译名\"} },\n            { TitleType.OrigName, new List<string>(){ \"原名\"} },\n            { TitleType.ProductionCompany, new List<string>(){ \"动画制作\", \"制作公司\"} }\n        };\n        \n        public enum AnimeType { TV, OVA, Movie, WEB, None };\n        public static Dictionary<AnimeType, List<string>> AnimeTypeDic = new Dictionary<AnimeType, List<string>>() \n        {\n            { AnimeType.TV, new List<string>(){ \"电视动画\"} },\n            { AnimeType.OVA, new List<string>(){ \"OVA\"} },\n            { AnimeType.Movie, new List<string>(){ \"电影\"} },\n            { AnimeType.WEB, new List<string>(){ \"WEB\", \"网络\"} }\n        };\n        \n        public bool IsBlank(IXLWorksheet sheet, int row, int col)\n        {\n            return sheet.Cell(row, col).CachedValue.ToString() == \"\";\n        }\n        \n        private string DeleteAnnotation(string str)\n        {\n            return Regex.Replace(str, @\"[\\[][0-9]*[\\]]\", \"\");\n        }\n        \n        private string ReplaceChars(string str)\n        {\n            return str.Replace(\" \", \"spacespace\").Replace(\".\", \"tenten\").Replace(\"-\", \"lineline\").Replace(\"'\", \"quotesquotes\").Replace(\"、\", \" \");\n        }\n        \n        /// <summary>\n        /// すべての分析の前に呼び出されます\n        /// </summary>\n        /// <param name=\"param\">着信パラメータ</param>\n        /// <param name=\"globalObject\">グローバルに存在し、現在の行番号など、他の呼び出しで使用する必要のあるデータを保存できます。</param>\n        /// <param name=\"allFilePathList\">分析されるすべてのファイルパスのリスト</param>\n        /// <param name=\"isExecuteInSequence\">順番実行するかどうか</param>\n        public void RunBeforeAnalyzeSheet(Param param, ref Object globalObject, List<string> allFilePathList, bool isExecuteInSequence)\n        {\n            Output.IsSaveDefaultWorkBook = false;\n            globalObject = new List<string>();\n        }\n\n        /// <summary>\n        /// シートを分析する\n        /// </summary>\n        /// <param name=\"param\">着信パラメータ</param>\n        /// <param name=\"sheet\">分析するシート</param>\n        /// <param name=\"filePath\">ファイルパス</param>\n        /// <param name=\"globalObject\">グローバルに存在し、現在の行番号など、他の呼び出しで使用する必要のあるデータを保存できます。</param>\n        /// <param name=\"isExecuteInSequence\">順番実行するかどうか</param>\n        /// <param name=\"invokeCount\">この分析関数が呼び出された回数</param>\n        public void AnalyzeSheet(Param param, IXLWorksheet sheet, string filePath, ref Object globalObject, bool isExecuteInSequence, int invokeCount)\n        {\n            if (sheet.Visibility != XLWorksheetVisibility.Visible)\n            {\n                return;\n            }\n        \n            List<Anime> animeList = new List<Anime>();\n        \n            string year = sheet.Name.Substring(0, 4);\n            \n            int nowRow = 1;\n            AnimeType nowAnimeType = AnimeType.None;\n            Season nowSeason = Season.None;\n            \n            int nameCol = -1;\n            int origNameCol = -1;\n            int productionCompanyCol = -1;\n            \n            AniClient aniClient = new AniClient();\n            \n            while (true)\n            {\n                if (IsBlank(sheet, nowRow, 3) && IsBlank(sheet, nowRow, 4) && !sheet.Cell(nowRow, 3).IsMerged() &&  !sheet.Cell(nowRow, 4).IsMerged())\n                {\n                    break;\n                }\n                \n                if (!IsBlank(sheet, nowRow, 1))\n                {\n                    nameCol = -1;\n                    origNameCol = -1;\n                    productionCompanyCol = -1;\n                    \n                    string typeStr = sheet.Cell(nowRow, 1).CachedValue.ToString();\n                    nowAnimeType = AnimeType.None;\n                    foreach (string str in AnimeTypeDic[AnimeType.TV])\n                    {\n                        if (typeStr.Contains(str))\n                        {\n                            nowAnimeType = AnimeType.TV;\n                            break;\n                        }\n                    }\n                    foreach (string str in AnimeTypeDic[AnimeType.OVA])\n                    {\n                        if (typeStr.Contains(str))\n                        {\n                            nowAnimeType = AnimeType.OVA;\n                            break;\n                        }\n                    }\n                    foreach (string str in AnimeTypeDic[AnimeType.Movie])\n                    {\n                        if (typeStr.Contains(str))\n                        {\n                            nowAnimeType = AnimeType.Movie;\n                            break;\n                        }\n                    }\n                    foreach (string str in AnimeTypeDic[AnimeType.WEB])\n                    {\n                        if (typeStr.Contains(str))\n                        {\n                            nowAnimeType = AnimeType.WEB;\n                            break;\n                        }\n                    }\n                    \n                    for (int nowCol = 3; nowCol < 10; ++nowCol) \n                    {\n                        if (IsBlank(sheet, nowRow, nowCol))\n                        {\n                            continue;\n                        }\n                        string titleStr = sheet.Cell(nowRow, nowCol).CachedValue.ToString();\n                        foreach (string str in TitleDic[TitleType.Name])\n                        {\n                            if (titleStr.Contains(str))\n                            {\n                                nameCol = nowCol;\n                                break;\n                            }\n                        }\n                        foreach (string str in TitleDic[TitleType.OrigName])\n                        {\n                            if (titleStr.Contains(str))\n                            {\n                                origNameCol = nowCol;\n                                break;\n                            }\n                        }\n                        foreach (string str in TitleDic[TitleType.ProductionCompany])\n                        {\n                            if (titleStr.Contains(str))\n                            {\n                                productionCompanyCol = nowCol;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (!IsBlank(sheet, nowRow, 2) && nowAnimeType == AnimeType.TV)\n                {\n                    string seasonStr = sheet.Cell(nowRow, 2).CachedValue.ToString();\n                    foreach (string str in SeasonDic[Season.Winter])\n                    {\n                        if (seasonStr.Contains(str))\n                        {\n                            nowSeason = Season.Winter;\n                            break;\n                        }\n                    }\n                    foreach (string str in SeasonDic[Season.Spring])\n                    {\n                        if (seasonStr.Contains(str))\n                        {\n                            nowSeason = Season.Spring;\n                            break;\n                        }\n                    }\n                    foreach (string str in SeasonDic[Season.Summer])\n                    {\n                        if (seasonStr.Contains(str))\n                        {\n                            nowSeason = Season.Summer;\n                            break;\n                        }\n                    }\n                    foreach (string str in SeasonDic[Season.Autumn])\n                    {\n                        if (seasonStr.Contains(str))\n                        {\n                            nowSeason = Season.Autumn;\n                            break;\n                        }\n                    }\n                }\n                \n                if (!IsBlank(sheet, nowRow, 1) || !IsBlank(sheet, nowRow, 2))\n                {\n                    ++nowRow;\n                    continue;\n                }\n                \n                Anime anime = new Anime();\n                anime.year = year;\n                anime.animeType = nowAnimeType;\n                anime.season = nowSeason;\n                anime.name = nameCol > 0 ? DeleteAnnotation(sheet.Cell(nowRow, nameCol).CachedValue.ToString()) : \"\";\n                anime.origName = origNameCol > 0 ? DeleteAnnotation(sheet.Cell(nowRow, origNameCol).CachedValue.ToString()) : \"\";\n                anime.productionCompany = productionCompanyCol > 0 ? DeleteAnnotation(sheet.Cell(nowRow, productionCompanyCol).CachedValue.ToString()) : \"\";\n                \n                string statusStr = sheet.Cell(nowRow, 11).CachedValue.ToString();\n                if (statusStr == \"未观看\")\n                {\n                    anime.status = Status.NeverWatched;\n                }\n                else if (statusStr == \"正在一周目\")\n                {\n                    anime.status = Status.Watching;\n                }\n                else if (statusStr == \"已看过\")\n                {\n                    anime.status = Status.Watched;\n                }\n                else if (statusStr == \"已弃番\")\n                {\n                    anime.status = Status.GaveUp;\n                }\n                else\n                {\n                    anime.status = Status.NeverWatched;\n                }\n                string planToWatchStr = sheet.Cell(nowRow, 12).CachedValue.ToString();\n                if (planToWatchStr == \"是\")\n                {\n                    anime.planToWatch = true;\n                }\n                else if (planToWatchStr == \"否\")\n                {\n                    anime.planToWatch = false;\n                }\n                anime.score = IsBlank(sheet, nowRow, 13) ? -1 : int.Parse(sheet.Cell(nowRow, 13).CachedValue.ToString());\n                anime.comment = sheet.Cell(nowRow, 14).CachedValue.ToString();\n                string tagsStr = sheet.Cell(nowRow, 15).CachedValue.ToString();\n                if (!string.IsNullOrEmpty(tagsStr))\n                {\n                    anime.tagListFromLocal = tagsStr.Trim().Split('\\n').ToList();\n                }\n                \n                if (anime.status == Status.Watched && (anime.animeType == AnimeType.TV || anime.animeType == AnimeType.WEB))\n                {\n                    if (param.Get(\"Option\").Contains(\"GetTag\") && (anime.tagListFromLocal == null || anime.tagListFromLocal.Count == 0))\n                    {\n                        Logger.Info(\"Waiting...\");\n                        Thread.Sleep(3000);\n                        Logger.Info(\"Getting tags...\");\n                        var results = aniClient.SearchMediaAsync(new SearchMediaFilter\n                        {\n                           Query = anime.origName,\n                           Type = MediaType.Anime,\n                           Sort = MediaSort.Relevance,\n                           Format = new Dictionary<MediaFormat, bool>\n                           {\n                              { MediaFormat.TV, true }, // set to only search for TV shows and movies\n                              { MediaFormat.TVShort, true } // set to not show TV shorts\n                           }\n                        }).Result;\n                        if (results == null || results.Data == null || results.Data.Length == 0)\n                        {\n                            Logger.Info(anime.name + \": Tag not found. \");\n                        }\n                        else\n                        {\n                            anime.tagListFromLocal = new List<string>();\n                            Media media = results.Data[0];\n                            MediaTag[] tags = aniClient.GetMediaTagsAsync(media.Id).Result;\n                            string tagStr = \"\";\n                            string inputTagStr = \"\";\n                            foreach (MediaTag tag in tags)\n                            {\n                                anime.tagListFromLocal.Add(tag.Name);\n                                tagStr += \" \" + tag.Name.Replace(\" \", \"-\");\n                                inputTagStr += tag.Name + \"\\n\";\n                            }\n                            inputTagStr = inputTagStr.Trim();\n                            sheet.Cell(nowRow, 15).SetValue(inputTagStr);\n                            Logger.Info(anime.name + \":\" + tagStr);\n                        }\n                    }\n                }\n                \n                animeList.Add(anime);\n                ++nowRow;\n                \n                if (anime.status == Status.Watched && anime.animeType == AnimeType.TV)\n                {\n                    Logger.Info(anime.year + \" \" + anime.season + \": \" + anime.name);\n                }\n            }\n            \n            Logger.Info(\"Saving...\");\n            // sheet.Workbook.Save();\n            Logger.Info(\"Saved\");\n            \n            GlobalDic.SetObj(year, animeList);\n            ((List<string>)globalObject).Add(year);\n        }\n\n        /// <summary>\n        /// すべての出力の前に呼び出されます\n        /// </summary>\n        /// <param name=\"param\">着信パラメータ</param>\n        /// <param name=\"workbook\">出力用のExcelファイル</param>\n        /// <param name=\"globalObject\">グローバルに存在し、現在の行番号など、他の呼び出しで使用する必要のあるデータを保存できます。</param>\n        /// <param name=\"allFilePathList\">分析されたすべてのファイルパスのリスト</param>\n        /// <param name=\"isExecuteInSequence\">順番実行するかどうか</param>\n        public void RunBeforeSetResult(Param param, XLWorkbook workbook, ref Object globalObject, List<string> allFilePathList, bool isExecuteInSequence)\n        {\n            List<string> yearList = (List<string>)globalObject;\n            List<Anime> animeList = new List<Anime>();\n            \n            Dictionary<string, int> countDic = new Dictionary<string, int>();\n            int maxCount = 0;\n            foreach(string year in yearList)\n            {\n                List<Anime> thisYearAnimeList = (List<Anime>)GlobalDic.GetObj(year);\n                animeList.AddRange(thisYearAnimeList);\n                int count = 0;\n                foreach(Anime anime in thisYearAnimeList)\n                {\n                    if (anime.animeType == AnimeType.TV || anime.animeType == AnimeType.WEB)\n                    {\n                        if (anime.status == Status.Watched)\n                        {\n                            ++count;\n                        }\n                    }\n                }\n                countDic[year] = count;\n                if (count > maxCount)\n                {\n                    maxCount = count;\n                }\n            }\n            \n            Logger.Info(\"Getting total data...\");\n            Dictionary<string, float> watchedTagStr = new Dictionary<string, float>();\n            Dictionary<string, float> watchedConpanyStr = new Dictionary<string, float>();\n            int tvWatched = 0;\n            int tvGaveUp = 0;\n            foreach(Anime anime in animeList)\n            {\n                if (anime.animeType != AnimeType.TV && anime.animeType != AnimeType.WEB)\n                {\n                    continue;\n                }\n                if (anime.status == Status.Watched)\n                {\n                    Logger.Info(anime.name + \" watched\");\n                    ++tvWatched;\n                    if (anime.tagListFromLocal != null && anime.tagListFromLocal.Count > 0)\n                    {\n                        Logger.Info(\"getting tag\");\n                        foreach (string tag in anime.tagListFromLocal)\n                        {\n                            if (tag.ToLower() == \"female protagonist\" || tag.ToLower() == \"male protagonist\")\n                            {\n                                continue;\n                            }\n                            if (!watchedTagStr.ContainsKey(tag))\n                            {\n                                watchedTagStr[tag] = 1;\n                            }\n                            else\n                            {\n                                watchedTagStr[tag] += 1;\n                            }\n                        }\n                    \n                        if (!watchedConpanyStr.ContainsKey(anime.productionCompany))\n                        {\n                            watchedConpanyStr[anime.productionCompany] = 1;\n                        }\n                        else\n                        {\n                            watchedConpanyStr[anime.productionCompany] += 1;\n                        }\n                    }\n                }\n                if (anime.status == Status.GaveUp)\n                {\n                    Logger.Info(anime.name + \" gave up\");\n                    ++tvGaveUp;\n                }\n            }\n            \n            List<string> output = new List<string>();\n            output.Add(\"# AnimeReport\");\n            \n            Logger.Info(\"Output start\");\n            output.Add(\"### \" + \"自\" + yearList[0] + \"年到\" + yearList.Last() + \"年, 共观看动画\" + tvWatched + \"部 (OVA与OAD除外), 弃番\" + tvGaveUp +\"部, 弃番率\" + (((double)tvGaveUp / (tvWatched + tvGaveUp)) * 100).ToString(\"#0.00\") + \"%\");\n            output.Add(\"\");\n            \n            \n            output.Add(\"<table>\");\n            output.Add(\"  <tr>\");\n            output.Add(\"    <td><a href=\\\"https://github.com/ZjzMisaka/AnimeReport\\\"><img width=1000 align=\\\"center\\\" src=\\\"https://github.com/ZjzMisaka/AnimeReport/blob/main/tags.bmp\\\" title=\\\"AnimeReport\\\"/></a></td>\");\n            output.Add(\"    <td><a href=\\\"https://github.com/ZjzMisaka/AnimeReport\\\"><img width=1000 align=\\\"center\\\" src=\\\"https://github.com/ZjzMisaka/AnimeReport/blob/main/companies.bmp\\\" title=\\\"AnimeReport\\\"/></a></td>\");\n            output.Add(\"  </tr>\");\n            output.Add(\"  <tr>\");\n            output.Add(\"    <th>Favourite Tags</th>\");\n            output.Add(\"    <th>Favourite Production Company</th>\");\n            output.Add(\"  </tr>\");\n            output.Add(\"</table>\");\n            output.Add(\"- Excluded the two tags \\\"Male protagonist\\\" and \\\"Female protagonist\\\"\");\n            \n            Logger.Info(\"Outputing chart...\");\n            output.Add(\"\");\n            List<string> lines = new List<string>();\n            for (int i = 0; i < 10; ++i)\n            {\n                lines.Add(\"\");\n            }\n            string baseStr = \"  ┗\";\n            string yearsStr = \"   \";\n            while (maxCount % 10 != 0)\n            {\n                ++maxCount;\n            }\n            int step = maxCount / 10;\n            output.Add(\"### Annual animation watching statistics map (last 20 years)\");\n            output.Add(\"````\");\n            for (int i = 0; i < 10; ++i)\n            {\n                string now = (maxCount - i * step).ToString() + \"┃\";\n                if (now.Length == 2)\n                {\n                    now = \" \" + now;\n                }\n                lines[i] = now;\n            }\n            if (yearList.Count() > 20)\n            {\n                yearList = yearList.GetRange(yearList.Count() - 20, 20);\n            }\n            foreach (string year in yearList)\n            {\n                int count = countDic[year];\n                for (int i = 0; i < 10; ++i)\n                {\n                    int now = (maxCount - i * step);\n                    if (count >= now)\n                    {\n                        lines[i] = lines[i] + \" ■■■■\";\n                    }\n                    else\n                    {\n                        if (i == 9 && count > 0)\n                        {\n                            lines[i] = lines[i] + \" ₋₋₋₋\";\n                        }\n                        else\n                        {\n                            lines[i] = lines[i] + \"     \";\n                        }\n                    }\n                }\n                baseStr += \"━━━━━\";\n                yearsStr += \" \" + year;\n            }\n            foreach (string line in lines)\n            {\n                output.Add(line);\n            }\n            output.Add(baseStr);\n            output.Add(yearsStr);\n            output.Add(\"````\");\n            output.Add(\"\");\n            \n            Logger.Info(\"Outputing year-season list\");\n            IEnumerable<IGrouping<string, Anime>> groupedResults = animeList\n                .Where(a => (a.animeType == AnimeType.TV || a.animeType == AnimeType.WEB) && (a.status == Status.Watched || a.status == Status.GaveUp))\n                .GroupBy(k => k.year + \"|\" + k.season, v => v);\n                IEnumerable<IGrouping<string, Anime>> groupedResultsReversed = groupedResults.Reverse();\n            foreach(IGrouping<string, Anime> animeGroup in groupedResultsReversed)\n            {\n                output.Add(\"<details>\");\n                string year = animeGroup.Key.Split('|')[0];\n                string season = animeGroup.Key.Split('|')[1];\n                Logger.Info(\"Outputing \" + year + \", \" + season);\n                int count = animeGroup.Count<Anime>();\n                output.Add(\"  <summary>Report of \" + year + \", \" + season + \" | count: \" + count + \"</summary>\");\n                output.Add(\"\");\n                output.Add(\"  |中文名|Name|Status|Score|\");\n                output.Add(\"  |----|----|----|----|\");\n                foreach(Anime anime in animeGroup)\n                {\n                    output.Add(\"  |\" + anime.name + \"|\" + anime.origName + \"|\" + anime.status + \"|\" + (anime.score == -1 ? \"-\" : anime.score) + \"|\");\n                    Logger.Info(anime.name);\n                }\n                output.Add(\"</details>\");\n                output.Add(\"\");\n            }\n            \n            Logger.Info(\"Outputing plan to watch list\");\n            output.Add(\"<details>\");\n            output.Add(\"  <summary>Plan to watch</summary>\");\n            output.Add(\"\");\n            output.Add(\"  |中文名|Name|\");\n            output.Add(\"  |----|----|\");\n            foreach(Anime anime in animeList)\n            {\n                if (anime.planToWatch)\n                {\n                    Logger.Info(\"Outputing plan to watch: \" + anime.name);\n                    output.Add(\"  |\" + anime.name + \"|\" + anime.origName + \"|\");\n                }\n            }\n            output.Add(\"</details>\");\n            output.Add(\"\");\n            \n            Logger.Info(\"Outputing high score list\");\n            List<Anime> sortedAnime = animeList.OrderBy(x => x.score).Reverse().ToList();\n            output.Add(\"<details>\");\n            output.Add(\"  <summary>High score list (tv, web)</summary>\");\n            output.Add(\"\");\n            output.Add(\"  |中文名|Name|Score|\");\n            output.Add(\"  |----|----|----|\");\n            int outputedHighScore = 0;\n            foreach (Anime anime in sortedAnime)\n            {\n                if (outputedHighScore == int.Parse(param.GetOne(\"HighScoreListCount\")))\n                {\n                    break;\n                }\n                if (anime.animeType != AnimeType.TV && anime.animeType != AnimeType.WEB)\n                {\n                    continue;\n                }\n                Logger.Info(\"Outputing high score list: \" + anime.name);\n                output.Add(\"  |\" + anime.name + \"|\" + anime.origName + \"|\" + anime.score + \"|\");\n                ++outputedHighScore;\n            }\n            output.Add(\"</details>\");\n            output.Add(\"\");\n            \n            PrivateFontCollection collection = new PrivateFontCollection();\n            collection.AddFontFile(param.GetOne(\"TtfFile\"));\n            FontFamily fontFamily = new FontFamily(\"Lolita\", collection);\n            TagCloudOption tagCloudOption = new TagCloudOption();\n            tagCloudOption.FontFamily = fontFamily;\n            tagCloudOption.RotateList = new List<int> { 0, 90 };\n            tagCloudOption.BackgroundColor = Color.White;\n            tagCloudOption.FontColorList = new List<Color>() { Color.FromArgb(81, 148, 240) };\n            tagCloudOption.FontSizeRange = (6, 90);\n            tagCloudOption.Margin = 2;\n            tagCloudOption.AngleStep = 1;\n            tagCloudOption.RadiusStep = 1;\n            Logger.Info(\"Making tags.bmp...\");\n            Bitmap bmpTag = new TagCloud(2000, 1500, watchedTagStr, tagCloudOption).Get();\n            bmpTag.Save(System.IO.Path.Combine(Output.OutputPath, \"tags.bmp\"));\n            while (Scanner.GetInput(\"确认使用? \") != \"1\")\n            {\n                Logger.Info(\"Making tags.bmp...\");\n                bmpTag = new TagCloud(2000, 1500, watchedTagStr, tagCloudOption).Get();\n                bmpTag.Save(System.IO.Path.Combine(Output.OutputPath, \"tags.bmp\"));\n            }\n            Logger.Info(\"Making companies.bmp...\");\n            Bitmap bmpCompany = new TagCloud(1000, 750, watchedConpanyStr, tagCloudOption).Get();\n            bmpCompany.Save(System.IO.Path.Combine(Output.OutputPath, \"companies.bmp\"));\n            while (Scanner.GetInput(\"确认使用? \") != \"1\")\n            {\n                Logger.Info(\"Making companies.bmp...\");\n                bmpCompany = new TagCloud(1000, 750, watchedConpanyStr, tagCloudOption).Get();\n                bmpCompany.Save(System.IO.Path.Combine(Output.OutputPath, \"companies.bmp\"));\n            }\n            \n            string outputPath = System.IO.Path.Combine(Output.OutputPath, \"README.md\");\n            Logger.Info(\"Write into: \" + outputPath + \"...\");\n            System.IO.File.WriteAllLines(outputPath, output);\n            Logger.Info(\"OK\");\n        }\n\n        /// <summary>\n        /// 分析結果をExcelにエクスポートする\n        /// </summary>\n        /// <param name=\"param\">着信パラメータ</param>\n        /// <param name=\"workbook\">出力用のExcelファイル</param>\n        /// <param name=\"filePath\">ファイルパス</param>\n        /// <param name=\"globalObject\">グローバルに存在し、現在の行番号など、他の呼び出しで使用する必要のあるデータを保存できます。</param>\n        /// <param name=\"isExecuteInSequence\">順番実行するかどうか</param>\n        /// <param name=\"invokeCount\">この出力関数が呼び出された回数</param>\n        /// <param name=\"totalCount\">出力関数を呼び出す必要がある合計回数</param>\n        public void SetResult(Param param, XLWorkbook workbook, string filePath, ref Object globalObject, bool isExecuteInSequence, int invokeCount, int totalCount)\n        {\n            \n        }\n\n        /// <summary>\n        /// すべての通話が終了した後に呼び出されます\n        /// </summary>\n        /// <param name=\"param\">着信パラメータ</param>\n        /// <param name=\"workbook\">出力用のExcelファイル</param>\n        /// <param name=\"globalObject\">グローバルに存在し、現在の行番号など、他の呼び出しで使用する必要のあるデータを保存できます。</param>\n        /// <param name=\"allFilePathList\">分析されたすべてのファイルパスのリスト</param>\n        /// <param name=\"isExecuteInSequence\">順番実行するかどうか</param>\n        public void RunEnd(Param param, XLWorkbook workbook, ref Object globalObject, List<string> allFilePathList, bool isExecuteInSequence)\n        {\n            \n        }\n    }\n}","paramDic":{"HighScoreListCount":{"describe":"高分榜上榜数","possibleValues":null,"type":2},"TtfFile":{"describe":"TTF文件路径","possibleValues":null,"type":2},"Option":{"describe":"选项","possibleValues":[{"value":"GetTag","describe":"获取Tag"},{"value":"OutputImg","describe":"生成标签云"}],"type":2}}}